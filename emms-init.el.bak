;;
;; 1. 在 mp3info 或者其它程序不能读取 mp3 文件信息时，用文件目录和文件
;; 名作信息
;;
;; 2. 可以听在线的 m3u，比如 trueice。打开 ywb-emms-stream-mode 后，可
;; 以即时导入到播放列表
;;
;; 3. 增强保存列表到文件的命令。增加删除重复歌曲命令。
;;
;; 4. 退出 emacs 时保存列表到文件，下次用 ywb-emms-load-last-playlists
;; 来导入。可以完全修复上次的状态
;;
;; 5. 增加 mode-line 的图标，显示播放的状态
;;
;;; The basic setting
(add-to-list 'load-path "~/.emacs.d/myBigEmacs/emms-2.0")
(require 'emms-setup)
(eval-when-compile
  (require 'cl))

(emms-standard)

(setq ;emms-info-mp3info-coding-system 'euc-cn ; mp3 info in gbk
      ;emms-lyrics-coding-system 'euc-cn
      emms-lyrics-display-on-modeline nil
      emms-playlist-buffer-name "*EMMS*" ; show the playlist buffer
      emms-source-file-default-directory "~/music/playlist/" ; source directory
      emms-repeat-playlist t
      emms-playlist-mode-window-width 35
      emms-player-mplayer-command-name "mplayer"
      emms-player-list '(emms-player-mplayer
			 emms-player-mplayer-playlist
                         ;emms-player-timidity
                         emms-player-mpg321
                         emms-player-ogg123))

(add-hook 'emms-playlist-mode-hook
          (lambda ()
            (toggle-truncate-lines 1)))

;;; addition library
(require 'emms-mode-line)
(require 'emms-mode-line-icon)
(emms-mode-line 1)

(require 'emms-playing-time)
(emms-playing-time 1)

(require 'emms-lyrics)
(emms-lyrics 1)

;(require 'emms-volume)

;;; addtion function
;;;; redefine of this function to avoid error and speed up
(defun emms-iconv (str from to)
  "Convert STR from FROM coding to TO coding."
  (if (stringp from) (setq from (intern-soft from)))
  (if (stringp to) (setq to (intern-soft to)))
  (when (and from to)
    (decode-coding-string
     (encode-coding-string str to)
     from)))

;;;; redefine of this function for play stream music that from
;;;; http://music.trueice.net
(defun emms-source-playlist-parse-m3u ()
  "Parse the native EMMS playlist in the current buffer."
  (let ((coding buffer-file-coding-system))
    (mapcar (lambda (file)
              (if (string-match "\\`http://" file)
                  (let ((track (emms-track 'url
                                           (encode-coding-string
                                            file buffer-file-coding-system))))
                    (emms-track-set track 'coding buffer-file-coding-system)
                    track)
                (emms-track 'file file)))
            (emms-source-playlist-m3u-files))))

;;;; set mp3 info from file name
(defun ywb-emms-info-file-name (track)
  "Use the file name as the track information. Use parent
directory name as artist and current file name as title. Add this
to the end of `emms-info-functions' for not rewrite exists
information when needed."
  (when (or (eq (emms-track-type track) 'file)
            (eq (emms-track-type track) 'url))
    (let ((name (emms-track-name track))
          (artist (emms-track-get track 'info-artist))
          (title (emms-track-get track 'info-title)))
      (if (and (eq (emms-track-type track) 'url)
               (emms-track-get track 'coding))
          (setq name (decode-coding-string name (emms-track-get track 'coding)))
)
      (when (or (null artist)
                (string= artist "")
                (string-match "unknown" artist))
        (emms-track-set track 'info-artist
                        (file-name-nondirectory
                         (substring (file-name-directory name) 0 -1))))
      (when (or (null title)
                (string= title ""))
        (emms-track-set track 'info-title
                        (file-name-sans-extension
                         (file-name-nondirectory name)))))))
(setq emms-info-functions (delq 'emms-info-ogginfo emms-info-functions))
(add-to-list 'emms-info-functions 'ywb-emms-info-file-name t)

;;;; automatically add m3u file download from http://music.trueice.net
(defvar ywb-emms-stream-m3u-list '((file . "/tmp/play.m3u")
                                   (regexp "/tmp/" "^play")))
(defvar ywb-emms-stream-timer nil)
(defun ywb-emms-stream-handler ()
  (when (buffer-live-p emms-playlist-buffer)
    (let (files tmp)
      (dolist (file ywb-emms-stream-m3u-list)
        (cond ((and (eq (car file) 'file)
                    (file-exists-p (cdr file)))
               (setq files (cons (cdr file) files)))
              ((eq (car file) 'regexp)
               (setq files (append (directory-files (nth 1 file)
                                                    t (nth 2 file))
                                   files)))
              ((eq (car file) 'function)
               (setq files (append (funcall (cdr file)) files)))))
      (dolist (file files)
        (setq tmp (make-temp-file "emms-"))
        (rename-file file tmp t)
        (with-current-emms-playlist
          (emms-add-playlist tmp))))))
(define-minor-mode ywb-emms-stream-mode
  "If turn on, the m3u file include in `ywb-emms-stream-m3u-list'
will automatic load when exists."
  :global t
  (if ywb-emms-stream-timer
      (cancel-timer ywb-emms-stream-timer))
  (if ywb-emms-stream-mode
      (setq ywb-emms-stream-timer
            (run-at-time nil 2 'ywb-emms-stream-handler))))

;;;; save playlist before exit
(setq ywb-emms-playlist-default "~/music/playlist/default")
(defun ywb-emms-playlist-save-on-exit ()
  (let ((buf emms-playlist-buffer)
        emms-playlist-buffer playlists file (i 0))
    (save-excursion
      (dolist (buf (remove-if-not 'buffer-live-p (emms-playlist-buffer-list)))
        (set-buffer buf)
        (when (> (buffer-size) 0)
          (setq emms-playlist-buffer buf
                file (concat ywb-emms-playlist-default
                             "-"
                             (number-to-string (incf i))
                             ".emms")
                playlists (cons (list (buffer-name)
                                      file (marker-position
emms-playlist-selected-marker))
                                playlists))
          (emms-playlist-save 'native file))
        (with-temp-buffer
          (insert "(\n;; active playlist\n")
          (prin1 (buffer-name buf) (current-buffer))
          (insert "\n;; playlists\n")
          (prin1 playlists (current-buffer))
          (insert "\n)")
          (write-file ywb-emms-playlist-default))))))
(add-hook 'kill-emacs-hook 'ywb-emms-playlist-save-on-exit)

;;;;; automatic load last playlist when start
(defun ywb-emms-load-last-playlists ()
  (interactive)
  (let (history buf)
    (with-temp-buffer
      (insert-file-contents ywb-emms-playlist-default)
      (setq history (read (current-buffer)))
      (dolist (playlist (cadr history))
        (with-current-buffer (emms-playlist-new (car playlist))
          (setq emms-playlist-buffer (current-buffer))
          (if (string= (car playlist) (car history))
              (setq buf (current-buffer)))
          (emms-add-playlist (cadr playlist))
          (emms-playlist-select (nth 2 playlist))))
      (setq emms-playlist-buffer buf)
      (emms-start))))
;; (ywb-emms-load-last-playlists)

;;;; set header-line-format for playlist buffer
(defun ywb-emms-mode-line-icon-function ()
  (concat " "
          emms-mode-line-icon-before-format
          (if emms-player-playing-p
              (if emms-player-paused-p
                  (propertize "P" 'display ywb-emms-mode-line-icon-pause)
                (propertize "R" 'display ywb-emms-mode-line-icon-start))
            (propertize "S" 'display ywb-emms-mode-line-icon-stop))
          (cond (emms-repeat-track
                 (propertize "r" 'display ywb-emms-mode-line-icon-repeat-track))
                (emms-repeat-playlist
                 (propertize "R" 'display
ywb-emms-mode-line-icon-repeat-playlist))
                (t " "))
          (emms-propertize "N" 'display emms-mode-line-icon-image-cache)
          (emms-mode-line-playlist-current)))
(setq emms-mode-line-mode-line-function 'ywb-emms-mode-line-icon-function)

(add-hook 'emms-player-started-hook 'ywb-emms-playlist-show-info)
(defun ywb-emms-playlist-show-info ()
  (interactive)
  (when (and emms-playlist-buffer
             (buffer-live-p emms-playlist-buffer))
    (with-current-emms-playlist
      (setq header-line-format
            '("Playlist: %b"
              emms-mode-line-string
              emms-playing-time-string)))))

;;;; Addition commands
(defun ywb-emms-playlist-save-dwim (format file)
  "If file exists, just append the list. elsewise save it"
  (interactive (list
                (emms-source-playlist-read-format)
                (read-file-name "Store as: "
                                emms-source-file-default-directory
                                emms-source-file-default-directory
                                nil)))
  (let ((emms-playlist-buffer (current-buffer)) content)
    (if (file-exists-p file)
        (let ((old-format
               (with-temp-buffer
                 (insert-file-contents file)
                 (emms-source-playlist-determine-format)))
              content entries)
          (if (not (eq old-format format))
              (error "Not match file format to exists file!")
            (with-temp-buffer
              (emms-source-playlist-unparse format
                                            (with-current-emms-playlist
                                              (current-buffer))
                                            (current-buffer))
              (goto-char (point-min))
              (cond ((eq format 'm3u)
                     (append-to-file (point-min) (point-max) file))
                    ((eq format 'native)
                     (setq content (buffer-substring (progn (forward-line 1)
                                                         (1+ (point)))
                                                  (point-max)))
                     (with-temp-buffer
                       (insert-file-contents file)
                       (goto-char (point-max))
                       (delete-char -2)
                       (insert "\n " content)
                       (write-file file)))
                    ((eq format 'pls)
                     (forward-line 1)
                     (setq entries (string-to-number
                                    (buffer-substring (+ (point) 16)
(line-end-position))))
                     (setq content (buffer-substring (progn (forward-line 2)
                                                         (point))
                                                  (point-max)))
                     (with-temp-buffer
                       (insert-file-contents file)
                       (goto-char (point-min))
                       (forward-line 1)
                       (forward-char 16)
                       (setq entries (+ entries
                                        (string-to-number
                                         (delete-and-extract-region (point)
(line-end-position)))))
                       (insert (number-to-string entries))
                       (goto-char (point-max))
                       (insert content)))))))
      (emms-playlist-save format file))))

;;;;; command to add playlist or file to current buffer
(defmacro ywb-define-emms-command (command &optional docstr)
  (let ((ywb-command (intern (format "ywb-%s" (symbol-name command)))))
    `(progn
       (defun ,ywb-command ()
         ,(or docstr "Not documented.")
         (interactive)
         (let ((emms-playlist-buffer (current-buffer)))
           (call-interactively ',command))))))
(ywb-define-emms-command emms-add-playlist
 "Add playlist to current buffer")
(ywb-define-emms-command emms-play-playlist
 "Clear current buffer and add new playlist to buffer")
(ywb-define-emms-command emms-add-file
 "Add file to current buffer")
(ywb-define-emms-command emms-sort)
(ywb-define-emms-command emms-shuffle)

;;;;; a command to clear current track and play next
(defun ywb-emms-playlist-clear-track-and-next ()
  "Clear current track and play next"
  (interactive)
  (with-current-emms-playlist
    (goto-char emms-playlist-selected-marker)
    (emms-playlist-mode-kill-entire-track)
    (if (emms-playlist-track-at)
        (emms-playlist-mode-play-current-track)
      (emms-next))))

;;;;; command to remove duplicate track
(defun ywb-uniq-list (list stringfy)
  (let ((hash (make-hash-table :test 'equal))
        str)
    (remove-if (lambda (elm)
                 (setq str (funcall stringfy elm))
                 (if (gethash str hash) t
                   (puthash str t hash) nil))
               list)))

(defun ywb-emms-uniq ()
  (interactive)
  (let ((emms-playlist-buffer (current-buffer)))
    (with-current-emms-playlist
      (save-excursion
        (widen)
        (let ((inhibit-read-only t)
              (current (emms-playlist-selected-track))
              (tracks (emms-playlist-tracks-in-region (point-min)
                                                      (point-max))))
          (delete-region (point-min) (point-max))
          (run-hooks 'emms-playlist-cleared-hook)
          (mapc 'emms-playlist-insert-track
                (nreverse
                 (ywb-uniq-list tracks 'emms-track-name)))
          (let ((pos (text-property-any (point-min)
                                        (point-max)
                                        'emms-track current)))
            (if pos
                (emms-playlist-select pos)
              (emms-playlist-first))))))))

;;;;; switch to next playlist
(defun ywb-emms-playlist-next (arg)
  (interactive "p")
  (let ((playlists (remove-if-not 'buffer-live-p
                                  (emms-playlist-buffer-list)))
        bufs idx)
    (if playlists
        (if (not (member (current-buffer) playlists))
            (switch-to-buffer (if (and emms-playlist-buffer
                                       (buffer-live-p emms-playlist-buffer))
                                  emms-playlist-buffer
                                (car playlists)))
          (setq bufs (member (current-buffer) playlists))
          (setq idx
                (+ (- (length playlists) (length bufs))
                   (if (> arg 0) 1 -1)))
          (switch-to-buffer (nth
                             (cond ((< idx 0) (1- (length playlists)))
                                   ((>= idx (length playlists)) 0)
                                   (t idx)) playlists)))
      (message "No playlist found!"))))
(defun ywb-emms-playlist-previous (arg)
  (interactive "p")
  (ywb-emms-playlist-next (- arg)))

;;; advice
;;;; rename buffer according to m3u playlist file name
(defadvice emms-play-playlist (after ywb-emms-rename-buffer)
  (with-current-emms-playlist
    (rename-buffer (generate-new-buffer-name
                    (format "*EMMS-%s*"
                            (file-name-sans-extension
                             (file-name-nondirectory file)))))))
(ad-activate 'emms-play-playlist)

;;;; show playlist with two window
(defadvice emms-playlist-mode-go-popup (before ywb-emms-delete-other-window)
  (delete-other-windows))
(ad-activate 'emms-playlist-mode-go-popup)

;;;; update mode line when change status
(defadvice emms-toggle-repeat-playlist (after ywb-emms-update-mode-line)
  (emms-mode-line-alter)
  (force-mode-line-update))
(defadvice emms-toggle-repeat-track (after ywb-emms-update-mode-line)
  (emms-mode-line-alter)
  (force-mode-line-update))
(defadvice emms-pause (after ywb-emms-update-mode-line)
  (emms-mode-line-alter)
  (force-mode-line-update))
(dolist (command '(emms-pause emms-toggle-repeat-track
emms-toggle-repeat-playlist))
  (ad-activate command))

;;; key bindings
(global-set-key (kbd "C-c e s") 'emms-start)
(global-set-key (kbd "C-c e SPC") 'emms-pause)
(global-set-key (kbd "C-c e x") 'emms-stop)
(global-set-key (kbd "C-c e p") 'emms-previous)
(global-set-key (kbd "C-c e n") 'emms-next)
(global-set-key (kbd "C-c e c") 'ywb-emms-playlist-clear-track-and-next)

(global-set-key (kbd "C-c e e") 'emms-playlist-new)
(global-set-key (kbd "C-c e m") 'emms-playlist-mode-go-popup)
(global-set-key (kbd "C-c e f") 'emms-play-playlist)
(global-set-key (kbd "C-c e a") 'emms-add-playlist)
(global-set-key (kbd "C-c e r") 'emms-toggle-repeat-track)
(global-set-key (kbd "C-c e R") 'emms-toggle-repeat-playlist)
(global-set-key (kbd "C-c e +") 'emms-volume-raise)
(global-set-key (kbd "C-c e -") 'emms-volume-lower)

(define-key emms-playlist-mode-map "a" 'ywb-emms-add-playlist)
(define-key emms-playlist-mode-map "A" 'ywb-emms-add-file)
(define-key emms-playlist-mode-map "l" 'ywb-emms-play-playlist)
(define-key emms-playlist-mode-map "D" 'emms-add-directory)
(define-key emms-playlist-mode-map " " 'emms-pause)
(define-key emms-playlist-mode-map "o" 'emms-start)
(define-key emms-playlist-mode-map "u" 'ywb-emms-shuffle)
(define-key emms-playlist-mode-map "S" 'ywb-emms-sort)
(define-key emms-playlist-mode-map "U" 'ywb-emms-uniq)
(define-key emms-playlist-mode-map "R" 'emms-toggle-repeat-playlist)
(define-key emms-playlist-mode-map "w" 'emms-playlist-set-playlist-buffer)
(define-key emms-playlist-mode-map "N" 'emms-playlist-new)
(define-key emms-playlist-mode-map "\C-x\C-s" 'ywb-emms-playlist-save-dwim)
(define-key emms-playlist-mode-map "\C-c\C-n" 'ywb-emms-playlist-next)
(define-key emms-playlist-mode-map "\C-c\C-p" 'ywb-emms-playlist-previous)

;;; icon definiton
(defvar ywb-emms-mode-line-icon-stop
  `(image :type xpm :ascent center :data ,(concat "/* XPM */
static char *note[] = {
/* width height num_colors chars_per_pixel */
\"    10   11        2            1\",
/* colors */
\". c " emms-mode-line-icon-color  "\",
\"# c None s None\",
/* pixels */
\"##########\",
\"#........#\",
\"#........#\",
\"#........#\",
\"#........#\",
\"#........#\",
\"#........#\",
\"#........#\",
\"#........#\",
\"#........#\",
\"##########\"};")))

(defvar ywb-emms-mode-line-icon-pause
  `(image :type xpm :ascent center :data ,(concat "/* XPM */
static char *note[] = {
/* width height num_colors chars_per_pixel */
\"    10   11        2            1\",
/* colors */
\". c " emms-mode-line-icon-color  "\",
\"# c None s None\",
/* pixels */
\"##########\",
\"##..##..##\",
\"##..##..##\",
\"##..##..##\",
\"##..##..##\",
\"##..##..##\",
\"##..##..##\",
\"##..##..##\",
\"##..##..##\",
\"##..##..##\",
\"##########\"};")))

(defvar ywb-emms-mode-line-icon-start
  `(image :type xpm :ascent center :data ,(concat "/* XPM */
static char *note[] = {
/* width height num_colors chars_per_pixel */
\"    10   11        2            1\",
/* colors */
\". c " emms-mode-line-icon-color  "\",
\"# c None s None\",
/* pixels */
\"##########\",
\"##.#######\",
\"##..######\",
\"##...#####\",
\"##....####\",
\"##.....###\",
\"##....####\",
\"##...#####\",
\"##..######\",
\"##.#######\",
\"##########\"};")))

(defvar ywb-emms-mode-line-icon-repeat-playlist
  `(image :type xpm :ascent center :data ,(concat "/* XPM */
static char *note[] = {
/* width height num_colors chars_per_pixel */
\"    10   11        2            1\",
/* colors */
\". c " emms-mode-line-icon-color  "\",
\"# c None s None\",
/* pixels */
\"###...####\",
\"#.......##\",
\"..#####..#\",
\"..######..\",
\"########..\",
\"########..\",
\"......##..\",
\"#....##..#\",
\"#........#\",
\"##.#.....#\",
\"##########\"};")))

(defvar ywb-emms-mode-line-icon-repeat-track
  `(image :type xpm :ascent center :data ,(concat "/* XPM */
static char *note[] = {
/* width height num_colors chars_per_pixel */
\"    10   11        2            1\",
/* colors */
\". c " emms-mode-line-icon-color  "\",
\"# c None s None\",
/* pixels */
\"##########\",
\"##########\",
\"##########\",
\"##.####.##\",
\"#..####..#\",
\"..........\",
\"#..####..#\",
\"##.####.##\",
\"##########\",
\"##########\",
\"##########\"};")))

;;; end of emms-init.el
